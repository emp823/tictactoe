// Generated by CoffeeScript 2.7.0
(function() {
  document.addEventListener('DOMContentLoaded', function() {
    var aiMove, board, cell, cells, checkWin, currentPlayer, gameOver, handleClick, i, len, makeMove, results, status, updateBoard;
    currentPlayer = 'X';
    board = Array(9).fill(null);
    gameOver = false;
    cells = document.querySelectorAll('.cell');
    status = document.getElementById('status');
    checkWin = function(board) {
      var a, b, c, i, len, pattern, winPatterns;
      winPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
      for (i = 0, len = winPatterns.length; i < len; i++) {
        pattern = winPatterns[i];
        [a, b, c] = pattern;
        if (board[a] && board[a] === board[b] && board[a] === board[c]) {
          return board[a];
        }
      }
      if (board.every(function(cell) {
        return cell !== null;
      })) {
        return 'Draw';
      }
      return null;
    };
    aiMove = function(board) {
      var cell, emptyIndices, i, index, j, len, len1, newBoard, player, randomIndex, ref;
      emptyIndices = (function() {
        var results;
        results = [];
        for (index in board) {
          cell = board[index];
          if (cell === null) {
            results.push(index);
          }
        }
        return results;
      })();
      console.log("Empty Indices:", emptyIndices);
      ref = ['O', 'X'];
      for (i = 0, len = ref.length; i < len; i++) {
        player = ref[i];
        for (j = 0, len1 = emptyIndices.length; j < len1; j++) {
          index = emptyIndices[j];
          newBoard = board.slice();
          newBoard[index] = player;
          if (checkWin(newBoard) === player) {
            return index;
          }
        }
      }
      if (emptyIndices.length > 0) {
        randomIndex = emptyIndices[Math.floor(Math.random() * emptyIndices.length)];
        console.log("AI picked index:", randomIndex);
        return randomIndex;
      } else {
        console.log("No empty indices available for AI move.");
        return null;
      }
    };
    updateBoard = function(board, index, player) {
      var newBoard;
      newBoard = board.slice();
      newBoard[index] = player;
      return newBoard;
    };
    makeMove = function(index) {
      var aiIndex, winner;
      if (gameOver || index === null || board[index] !== null) {
        return;
      }
      board = updateBoard(board, index, currentPlayer);
      cells[index].textContent = currentPlayer;
      winner = checkWin(board);
      if (winner) {
        gameOver = true;
        return status.textContent = winner === 'Draw' ? 'It\'s a draw!' : `${winner} wins!`;
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        if (currentPlayer === 'O' && !gameOver) {
          aiIndex = aiMove(board);
          return makeMove(aiIndex);
        }
      }
    };
    handleClick = function(event) {
      var index;
      index = parseInt(event.target.dataset.cell);
      return makeMove(index);
    };
    results = [];
    for (i = 0, len = cells.length; i < len; i++) {
      cell = cells[i];
      results.push(cell.addEventListener('click', handleClick));
    }
    return results;
  });

}).call(this);
